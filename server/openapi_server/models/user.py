# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, grade=None, clubs=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param grade: The grade of this User.  # noqa: E501
        :type grade: int
        :param clubs: The clubs of this User.  # noqa: E501
        :type clubs: List[str]
        """
        self.openapi_types = {
            'name': str,
            'grade': int,
            'clubs': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'grade': 'grade',
            'clubs': 'clubs'
        }

        self._name = name
        self._grade = grade
        self._clubs = clubs

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def grade(self):
        """Gets the grade of this User.


        :return: The grade of this User.
        :rtype: int
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this User.


        :param grade: The grade of this User.
        :type grade: int
        """
        if grade is None:
            raise ValueError("Invalid value for `grade`, must not be `None`")  # noqa: E501
        if grade is not None and grade > 3:  # noqa: E501
            raise ValueError("Invalid value for `grade`, must be a value less than or equal to `3`")  # noqa: E501
        if grade is not None and grade < 1:  # noqa: E501
            raise ValueError("Invalid value for `grade`, must be a value greater than or equal to `1`")  # noqa: E501

        self._grade = grade

    @property
    def clubs(self):
        """Gets the clubs of this User.


        :return: The clubs of this User.
        :rtype: List[str]
        """
        return self._clubs

    @clubs.setter
    def clubs(self, clubs):
        """Sets the clubs of this User.


        :param clubs: The clubs of this User.
        :type clubs: List[str]
        """
        if clubs is None:
            raise ValueError("Invalid value for `clubs`, must not be `None`")  # noqa: E501

        self._clubs = clubs
